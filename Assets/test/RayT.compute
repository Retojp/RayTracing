// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
static const float EPSILON = 0.01f;
static const float EPSILON2 = 0.0001f;
float4 _DirectionalLight;
float time;
float _mov;
float _mov2;

struct Sphere {
	float3 position;
	float r;
	float3 color;
	float3 specular;
	float ref;
	bool dielec;
};

struct RayHit {
	float3 position;
	float dist;
	float3 normal;
	float3 color;
	float3 specular;
	float ref;
	bool dielec;
	float ni;
	float nt;



};

struct Ray {
	float3 origin;
	float3 direction;
	float3 energy;
};

Ray CreateRay(float3 o, float3 d)
{
	Ray ray;
	ray.origin = o;
	ray.direction = d;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

RayHit newHit()
{
	RayHit hit;
	hit.position = float3(0, 0, 0);
	hit.dist = 1.#INF;
	hit.normal = float3(0, 0, 0);
	hit.color = float3(0,0,0);
	hit.specular = 1.0f;
	hit.ref = 1.0f;
	hit.dielec = false;
	hit.ni = 1.0f;
	hit.nt = 1.0f;
	return hit;
}

struct MeshObject
{
	float4x4 localToWorldMatrix;
	int indices_offset;
	int indices_count;
	int specular;
};
struct SphereObject
{
	float3 position;
	float radius;
	float specular;
};
StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;
StructuredBuffer<SphereObject> _Spheres;




void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.dist)
	{
		//bestHit.dielec = false;
		bestHit.dist = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.specular = sphere.specular;
		bestHit.color = sphere.color;
		
		if (sphere.dielec) {
			bestHit.ref = sphere.ref;
			bestHit.dielec = true;
		}
		else {
			bestHit.dielec = false;
			bestHit.ref = 1.0f;
			bestHit.ni = 1.0f;
			bestHit.nt = 1.0f;
		}
	}
	
}

struct Ellipsoid
{
	float3 center;
	float3 size;
	float3 color;
	float ref;
	bool dielec;
};

void IntersectEllipsoid(Ray ray,inout RayHit bestHit, Ellipsoid ellipsoid)
{
	RayHit hit = bestHit;
	float3 O_C = ray.origin - ellipsoid.center;
	float3 dir = normalize(ray.direction);

	float a =
		((dir.x*dir.x) / (ellipsoid.size.x*ellipsoid.size.x))
		+ ((dir.y*dir.y) / (ellipsoid.size.y*ellipsoid.size.y))
		+ ((dir.z*dir.z) / (ellipsoid.size.z*ellipsoid.size.z));
	float b =
		((2.f*O_C.x*dir.x) / (ellipsoid.size.x*ellipsoid.size.x))
		+ ((2.f*O_C.y*dir.y) / (ellipsoid.size.y*ellipsoid.size.y))
		+ ((2.f*O_C.z*dir.z) / (ellipsoid.size.z*ellipsoid.size.z));
	float c =
		((O_C.x*O_C.x) / (ellipsoid.size.x*ellipsoid.size.x))
		+ ((O_C.y*O_C.y) / (ellipsoid.size.y*ellipsoid.size.y))
		+ ((O_C.z*O_C.z) / (ellipsoid.size.z*ellipsoid.size.z))
		- 1.f;

	float d = ((b*b) - (4.f*a*c));
	if (d < 0.f || a == 0.f || b == 0.f || c == 0.f)
		return;

	d = sqrt(d);

	float t1 = (-b + d) / (2.f*a);
	float t2 = (-b - d) / (2.f*a);

	if (t1 <= EPSILON && t2 <= EPSILON) return; // both intersections are behind the ray origin
	bool back = (t1 <= EPSILON || t2 <= EPSILON); // If only one intersection (t>0) then we are inside the ellipsoid and the intersection is at the back of the ellipsoid
	float t = 0.f;
	if (t1 <= EPSILON)
		t = t2;
	else
		if (t2 <= EPSILON)
			t = t1;
		else
			t = (t1 < t2) ? t1 : t2;

	if (t > EPSILON && t < hit.dist) 
	{
		hit.position = ray.origin + t * dir;
		hit.normal = hit.position - ellipsoid.center;
		hit.normal.x = 2.f*hit.normal.x / (ellipsoid.size.x*ellipsoid.size.x);
		hit.normal.y = 2.f*hit.normal.y / (ellipsoid.size.y*ellipsoid.size.y);
		hit.normal.z = 2.f*hit.normal.z / (ellipsoid.size.z*ellipsoid.size.z);

		hit.normal *= (back) ? -1.f : 1.f;
		hit.normal = normalize(hit.normal);
		hit.dist = t;

		if (ellipsoid.dielec) {
			hit.ref = ellipsoid.ref;
			hit.dielec = true;
			float tmp = hit.nt;
			hit.nt = ellipsoid.ref;
			hit.ni = tmp;
		}
		else {
			hit.dielec = false;
			hit.ref = 1.0f;
			hit.ni = 1.0f;
			hit.nt = 1.0f;
		}
		bestHit = hit;
	}
}

void IntersectSphereT(Ray ray, inout RayHit bestHit, Sphere sphere)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t1,t2,t;
	t1 = p1 - p2;
	t2 = p1 + p2;
	if (p1 - p2 > 0)
	{
		t = p1 - p2	;
		if (t > 0 && t < bestHit.dist)
		{
			bestHit.dist = t;
			bestHit.position = ray.origin + t * ray.direction;
			bestHit.normal = normalize(bestHit.position - sphere.position);
			bestHit.color = sphere.color;
			bestHit.specular = sphere.specular;
			if (sphere.dielec) {
				bestHit.ref = sphere.ref;
				bestHit.dielec = true;
				float tmp = bestHit.nt;
				bestHit.nt = sphere.ref;
				bestHit.ni = tmp;
			}
			else {
				bestHit.dielec = false;
				bestHit.ref = 1.0f;
				bestHit.ni = 1.0f;
				bestHit.nt = 1.0f;
			}
		}
	}
	//else
	{
		t = p1 + p2;
		if (t > 0 && t < bestHit.dist)
		{
			bestHit.dist = t;
			bestHit.position = ray.origin + t * ray.direction;
			bestHit.normal = normalize(bestHit.position - sphere.position);
			bestHit.color = sphere.color;
			bestHit.specular = sphere.specular;
			if (sphere.dielec) {
				bestHit.ref = sphere.ref;
				bestHit.dielec = true;
				float tmp = bestHit.nt;
				bestHit.nt = sphere.ref;
				bestHit.ni = tmp;
			}
			else {
				bestHit.dielec = false;
				bestHit.ref = 1.0f;
				bestHit.ni = 1.0f;
				bestHit.nt = 1.0f;
			}
		}
	}
	
}



void IntersectSphereUnion(Ray ray, inout RayHit bestHit, Sphere sphere, Sphere sphere2)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
	//if (p2sqr < 0)
	//	return;
	float p2 = sqrt(p2sqr);

	float3 d2 = ray.origin - sphere2.position;
	float p12 = -dot(ray.direction, d2);
	float p22sqr = p12 * p12 - dot(d2, d2) + sphere2.r * sphere2.r;
	//if (p22sqr < 0)
	//	return;
	float p22 = sqrt(p22sqr);
	bool h = true;
	bool back = false;


	float t1min, t1max, t2min,t2max,t;
	t1min = p1 - p2;
	t1max = p1 + p2;
	t2min = p12 - p22;
	t2max = p12 + p22;


	if ((t1min < t2min) && (t1max > t2min))
	{
		if (t2min < 0.01)
		{
			t = t1max;
			back = true;
			sphere.ref = 1 / sphere.ref;
		}
		else
		{
			t = t2min;
			sphere = sphere2;
		}
	}
	else if ((t2min < t1min) && (t2max > t1min))
	{
		if (t1min < 0.01)
		{
			t = t2max;
			sphere = sphere2;
			back = true;
			sphere.ref = 1 / sphere.ref;
		}
		else
		{
			t = t1min;
		}
	}
	else h = false;


	if (t > 0 && t < bestHit.dist && h)
	{
		bestHit.dist = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = -normalize(bestHit.position - sphere.position);
		bestHit.color = sphere.color;
		bestHit.specular = sphere.specular;
		bestHit.normal *= (back) ? -1.f : 1.f;
		if (sphere.dielec) {
			bestHit.ref = sphere.ref;
			bestHit.dielec = true;
			float tmp = bestHit.nt;
			bestHit.nt = sphere.ref;
			bestHit.ni = tmp;
		}
		else {
			bestHit.dielec = false;
			bestHit.ref = 1.0f;
			bestHit.ni = 1.0f;
			bestHit.nt = 1.0f;
		}
	}

}


void IntersectSphereDiff(Ray ray, inout RayHit bestHit, Sphere sphere, Sphere sphere2)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
	//if (p2sqr < 0)
	//	return;
	float p2 = sqrt(p2sqr);

	float3 d2 = ray.origin - sphere2.position;
	float p12 = -dot(ray.direction, d2);
	float p22sqr = p12 * p12 - dot(d2, d2) + sphere2.r * sphere2.r;
	//if (p22sqr < 0)
	//	return;
	float p22 = sqrt(p22sqr);
	bool h = true;
	bool back = false;



	float t1min, t1max, t2min, t2max, t;
	t1min = p1 - p2;
	t1max = p1 + p2;
	t2min = p12 - p22;
	t2max = p12 + p22;

	if ((t2min > t1min) && (t2min < t1max))
	{
		t = t2min;
		sphere = sphere2;
		back = true;
	}
	else if ((t2max < t1max) && (t2max > t1min))
	{
		t = t2max;
		sphere = sphere2;
		
	}
	else h = false;


	if (t > 0 && t < bestHit.dist && h)
	{
		bestHit.dist = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = -normalize(bestHit.position - sphere.position);
		bestHit.normal *= (back) ? -1.f : 1.f;
		bestHit.color = sphere.color;
		bestHit.specular = sphere.specular;
		if (sphere.dielec) {
			bestHit.ref = sphere.ref;
			bestHit.dielec = true;
			float tmp = bestHit.nt;
			bestHit.nt = sphere.ref;
			bestHit.ni = tmp;
		}
		else {
			bestHit.dielec = false;
			bestHit.ref = 1.0f;
			bestHit.ni = 1.0f;
			bestHit.nt = 1.0f;
		}
	}

}



Ray CreateCameraRay(float2 uv) // Tworzenie promienia na podstawie pozycji kamery
{
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}



void IntersectSphereT3(Ray ray, inout RayHit hit, Sphere sphere, Sphere sphere2)
{
	// Calculate distance along the ray where the sphere is intersected
	//RayHit hit = bestHit;

	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	//---------------------------------------------------------------
	float3 d2 = ray.origin - sphere2.position;
	float p12 = -dot(ray.direction, d2);
	float p22sqr = p12 * p12 - dot(d2, d2) + sphere2.r * sphere2.r;
	if (p22sqr < 0)
		return;
	float p22 = sqrt(p22sqr);


	float t1min,t1max,t2min,t2max,t,t2;
	t1min = p1 - p2;
	t1max = p1 + p2;

	t2min = p12 - p22;
	t2max = p12 + p22;
	bool back = false;
	bool h = true;

	if ((t1min<t2min)&&(t1max>t2min)) 
	{

			//back = !back;
			if (t2min < 0)
			{
				t = t1max;
				back = !back;
				
			}
			else
			{
				t = t2min;
				sphere = sphere2;
			}
			
	}
	else if ((t2min < t1min) && (t2max > t1min))
	{
		if (t1min < 0)
		{
			t = t2max;
			sphere = sphere2;
			back = !back;
		}
		else {
			t = t1min;
		}
		//sphere = sphere2;

		//back = !back;
	}
	else h=false;

	//if (t2min < t1min) {
	//	t = t2min; 

	//	
	//}
	//else if (t1max < t2max) {
	//	t = t1min; 
	//	
	//}
	//else { 
	//	h = false; 
	//}

	if (t > EPSILON && t < hit.dist && h)
	{
		hit.dist = t;
		hit.position = ray.origin + t * ray.direction;
		hit.normal = -normalize(hit.position - sphere.position);
		hit.normal *= (back) ? -1.f : 1.f;
		hit.specular = sphere.specular;
		if (sphere.dielec) {
			hit.ref = sphere.ref;
			hit.dielec = true;
			float tmp = hit.nt;
			hit.nt = sphere.ref;
			hit.ni = tmp;
		}
		else {
			hit.dielec = false;
			hit.ref = 1.0f;
			hit.ni = 1.0f;
			hit.nt = 1.0f;
		}
	}
	//float len = sqrt(dot(hit.position - sphere2.position, hit.position - sphere2.position));
	//if (len <= sphere2.r)
		//bestHit = hit;
}


void IntersectSphereDifference(Ray ray, inout RayHit hit, Sphere sphere, Sphere sphere2)
{
	// Calculate distance along the ray where the sphere is intersected
	//RayHit hit = bestHit;

	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	//---------------------------------------------------------------
	float3 d2 = ray.origin - sphere2.position;
	float p12 = -dot(ray.direction, d2);
	float p22sqr = p12 * p12 - dot(d2, d2) + sphere2.r * sphere2.r;
	if (p22sqr < 0)
		return;
	float p22 = sqrt(p22sqr);


	float t1min, t1max, t2min, t2max, t, t2;
	t1min = p1 - p2;
	t1max = p1 + p2;

	t2min = p12 - p22;
	t2max = p12 + p22;
	bool back = false;
	bool h = true;
	

	if ((t2max < t1max) && (t2max > t1min))
	{
		t = t2max;
		sphere = sphere2;
		//back = true;
	}
	else if ((t2min > t1min) && (t2min < t1max))
	{
		t = t2min;
		sphere = sphere2;
	}


	else h = false;

	if (t > EPSILON && t < hit.dist && h)
	{
		hit.dist = t;
		hit.position = ray.origin + t * ray.direction;
		hit.normal = normalize(hit.position - sphere.position);
		//hit.normal *= (back) ? -1.f : 1.f;
		hit.specular = sphere.specular;
		if (sphere.dielec) {
			hit.ref = sphere.ref;
			hit.dielec = true;
			float tmp = hit.nt;
			hit.nt = sphere.ref;
			hit.ni = tmp;
		}
		else {
			hit.dielec = false;
			hit.ref = 1.0f;
			hit.ni = 1.0f;
			hit.nt = 1.0f;
		}
	}
	//float len = sqrt(dot(hit.position - sphere2.position, hit.position - sphere2.position));
	//if (len <= sphere2.r)
		//bestHit = hit;
}

void Lens2(Ray ray, inout RayHit bestHit, Sphere sphere1, Sphere sphere2)
{
	RayHit hit = bestHit;
	RayHit hit2 = bestHit;
	IntersectSphereT3(ray, hit2, sphere1, sphere2);
	IntersectSphereT3(ray, hit, sphere2, sphere1);
	if (hit.dist > hit2.dist)
		bestHit = hit;
	else
		bestHit = hit2;
}

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
	inout float t, inout float u, inout float v)
{
	// find vectors for two edges sharing vert0
	float3 edge1 = vert1 - vert0;
	float3 edge2 = vert2 - vert0;
	// begin calculating determinant - also used to calculate U parameter
	float3 pvec = cross(ray.direction, edge2);
	// if determinant is near zero, ray lies in plane of triangle
	float det = dot(edge1, pvec);
	// use backface culling
	if (det < EPSILON2)
		return false;
	float inv_det = 1.0f / det;
	// calculate distance from vert0 to ray origin
	float3 tvec = ray.origin - vert0;
	// calculate U parameter and test bounds
	u = dot(tvec, pvec) * inv_det;
	if (u < 0.0 || u > 1.0f)
		return false;
	// prepare to test V parameter
	float3 qvec = cross(tvec, edge1);
	// calculate V parameter and test bounds
	v = dot(ray.direction, qvec) * inv_det;
	if (v < 0.0 || u + v > 1.0f)
		return false;
	// calculate t, ray intersects triangle
	t = dot(edge2, qvec) * inv_det;
	return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
	uint offset = meshObject.indices_offset;
	uint count = offset + meshObject.indices_count;
	for (uint i = offset; i < count; i += 3)
	{
		float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
		float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
		float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;
		float t, u, v;
		if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
		{
			if (t > 0 && t < bestHit.dist)
			{
				bestHit.dist = t;
				bestHit.position = ray.origin + t * ray.direction;
				bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
				bestHit.color = 0.0f;
				bestHit.specular = float3(meshObject.specular, meshObject.specular, meshObject.specular);
				//bestHit.smoothness = 0.99f;
				//bestHit.emission = 0.0f;
			}
		}
	}
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = newHit();
	uint count, stride, i;
	

	Sphere sphere1;
	sphere1.position = _Spheres[0].position;
	sphere1.r = _Spheres[0].radius;
	sphere1.color = float3(0.0f, .0f, 0);
	sphere1.ref = 1.4f;
	sphere1.specular = _Spheres[0].specular;
	sphere1.dielec = true;

	Sphere sphere2;
	sphere2.position = _Spheres[1].position;
	sphere2.r = _Spheres[1].radius;
	sphere2.color = float3(0.0f, 0.0f, 0.0f);
	sphere2.ref =1.4f;
	sphere2.specular = _Spheres[1].specular;
	sphere2.dielec = true;

	Sphere sphere3;
	sphere3.position = _Spheres[2].position;
	sphere3.r = _Spheres[2].radius;
	sphere3.color = float3(1.0f, 1.0f, 1.0f);
	sphere3.ref = 1.0f;
	sphere3.specular = 0.1;
	sphere3.dielec = false;

	Ellipsoid ell1;
	ell1.center = float3(-39.0f/5,-5.0f,10.0f);
	ell1.size = float3(1.0f+(_mov/6), 2.0f + (_mov2 / 6), 2.0f + (_mov2 / 6));
	ell1.dielec = true;
	ell1.ref = 0.5;

	Sphere sphere4;
	sphere4.position = _Spheres[3].position;
	sphere4.r = _Spheres[3].radius;
	sphere4.color = float3(0.0f, .0f, 0);
	sphere4.ref = 1.4f;
	sphere4.specular = _Spheres[3].specular;
	sphere4.dielec = false;
	 
	Sphere sphere5;
	sphere5.position = _Spheres[4].position;
	sphere5.r = _Spheres[4].radius;
	sphere5.color = float3(0.0f, 0.0f, 0.0f);
	sphere5.ref = 1.4f;
	sphere5.specular = _Spheres[4].specular;
	sphere5.dielec = false;

	IntersectSphereT(ray, bestHit, sphere3 );

	//IntersectSphereT3(ray, bestHit, sphere2,sphere1);
	IntersectSphereUnion(ray, bestHit, sphere2,sphere1);

	IntersectSphereDiff(ray, bestHit, sphere4, sphere5);
	//IntersectEllipsoid(ray, bestHit, ell1);
	

	// Trace mesh objects
	_MeshObjects.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
		IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
	}

	return bestHit;
}

bool ifRefracted(RayHit hit, inout Ray ray)
{
	if (hit.dielec)
	{
		float ni_o_nt = hit.ni / hit.nt;
		float3 uv = normalize(ray.direction);
		float dt = dot(uv, hit.normal);
		float d = 1.0f - ni_o_nt * ni_o_nt*(1 - dt * dt);
		if (d > 0)
		{
			ray.direction = refract(uv, hit.normal, ni_o_nt);
			return true;
		}
		else return false;
	}
	else return false;
}

void scatter(inout Ray ray, RayHit hit)
{
	float3 reflected = reflect(ray.direction, hit.normal);
	if (hit.dielec) {
		float ni_o_nt = hit.ni / hit.nt;
		float3 outnormal;
		float3 att = float3(1.0f, 1.0f, 1.0f);
		if (dot(ray.direction, hit.normal) > 0) {
			hit.normal = -hit.normal;

		}
		else
		{
			float tmp = hit.ni;
			hit.ni = hit.nt;
			hit.nt = tmp;

		}
		if (!ifRefracted(hit, ray))
		{
			ray.direction = reflected;
		}
	}
	else ray.direction = reflected;
}



float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.dist < 1.#INF) 
	{

		float3 color = float3(0, 0, 0);
		ray.origin = hit.position + hit.normal * 0.001f;

		//if (ifRefracted(hit, ray))
		//{
		//	ray.direction = refract(ray.direction, hit.normal, hit.ni/hit.nt);
		//	
		//}
		//else
		//{
		//	ray.direction = reflect(ray.direction, hit.normal);
		//}
		scatter(ray,hit);
		ray.energy *= hit.specular;

		//color = saturate(dot(hit.normal, light.direction)*-1 * hit.color);

		color = saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.color;

		return color;
	}
	else
	{
		ray.energy = 0;
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	float3 color = float3(0,0,0);
	Ray ray;
	Result.GetDimensions(width, height);
	float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
	ray = CreateCameraRay(uv);
	//ray = CreateCameraRay2(float2(width/2, height/2));
	for (int s = 0; s < 10; s++)
	{
		RayHit hit = Trace(ray);
		color += ray.energy * Shade(ray, hit);
		if (!any(ray.energy))
		{
			break;
		}
	}
	//color += ray.direction*0.5f + 0.5f;
	Result[id.xy] = float4(color,1);
}

